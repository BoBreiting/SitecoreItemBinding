<#@ template language="C#" #>
<#@ output encoding="utf-8"#>
<#@ include file="Helpers.tt" #>
<#@ include file="StringExtensions.tt" #>
<#@ include file="GeneralExtensions.tt" #>
<#@ include file="Inflector.tt" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="HedgehogDevelopment.SitecoreProject.VSIP.CodeGeneration.Models" #>
<#@ parameter name="Model" type="HedgehogDevelopment.SitecoreProject.VSIP.CodeGeneration.Models.SitecoreItem" #>
<#@ parameter name="DefaultNamespace" type="System.String" #>
<#
/*
This TDS Code Generation template is used to generate objects that are compatible with the
Sitecore ItemBinding framework written by Bo Breiting and available @ https://github.com/BoBreiting/SitecoreItemBinding
This template will create one class for each template with base templates created as composite class properties
*/
#>
<#
SitecoreTemplate template = Model as SitecoreTemplate;
if (template == null)
{
	return String.Empty;
}

string Tool = "Team Development for Sitecore - ItemBindingCompositeTemplates.tt";
string ToolVersion = "1.0";
#>
namespace <#= GetNamespace(DefaultNamespace, template) #>
{
  ///<summary>
  ///Generated partial class for the template <#= template.Name #> with composite base template relations
  ///</summary>
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("<#=Tool#>", "<#=ToolVersion#>")]
  [RequiredBaseTemplate("{<#= template.ID #>}")] // <#= template.Name #>
<# if (template.BaseTemplates.Count > 0) { foreach(SitecoreTemplate baseTemplate in template.BaseTemplates) { #>
  [CompositeType(typeof(<#= GetNamespace(DefaultNamespace, baseTemplate)#>.<#= AsClassName(baseTemplate.Name).Replace("_", String.Empty) #>))]
<# } } #>
  public partial class <#= AsClassName(template.Name).Replace("_", String.Empty) #> : ItemModel
  {
    public <#= AsClassName(template.Name).Replace("_", String.Empty) #>(Item item) : base(item)
    {
    }

<# foreach (var field in template.Fields) { #>
    public readonly ID <#= AsPropertyName(field.Name).Replace("_", String.Empty) #>FieldId = new ID("{<#= field.ID #>}");
<# } #>
<# String fullyQualifiedClassName; #>
<# String propertyName; #>
<# String fieldName; #>
<# if (template.BaseTemplates.Count > 0) { foreach(SitecoreTemplate baseTemplate in template.BaseTemplates) { #>
<# fullyQualifiedClassName = GetNamespace(DefaultNamespace, baseTemplate) + "." + AsClassName(baseTemplate.Name).Replace("_", String.Empty); #>
<# propertyName = !AsPropertyName(baseTemplate.Name).Replace("_", String.Empty).Equals(AsPropertyName(template.Name).Replace("_", String.Empty)) ? AsPropertyName(baseTemplate.Name).Replace("_", String.Empty) : String.Concat("Base", AsPropertyName(baseTemplate.Name).Replace("_", String.Empty)); #>
<# fieldName = AsFieldName(propertyName); #>

    public <#= fullyQualifiedClassName #> <#= propertyName #>
    {
      get { return <#= fieldName #> ?? (<#= fieldName #> = InnerItem.BindAs<<#= fullyQualifiedClassName #>>()); }
    }
    private <#= fullyQualifiedClassName #> <#= fieldName #>;
<# } } #>
  }
}